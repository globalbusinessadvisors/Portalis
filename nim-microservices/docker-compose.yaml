version: '3.8'

services:
  # Main NIM microservice (REST API)
  portalis-nim:
    build:
      context: .
      dockerfile: Dockerfile
    image: portalis-nim:latest
    container_name: portalis-nim-api
    restart: unless-stopped

    ports:
      - "8000:8000"    # REST API
      - "9090:9090"    # Prometheus metrics

    environment:
      # Service configuration
      - SERVICE_NAME=portalis-nim
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=production
      - LOG_LEVEL=info

      # Model configuration
      - MODEL_PATH=/models/nemo_translation.nemo
      - ENABLE_CUDA=true
      - GPU_ID=0

      # Triton configuration
      - TRITON_URL=triton:8000
      - TRITON_PROTOCOL=http

      # Performance tuning
      - WORKERS=2
      - BATCH_SIZE=32
      - MAX_QUEUE_SIZE=100

      # Security
      - ENABLE_AUTH=false
      # - API_KEYS=client1:key1,client2:key2

      # Monitoring
      - ENABLE_METRICS=true
      - ENABLE_TRACING=false

    volumes:
      # Mount models directory
      - ./models:/models:ro
      # Mount config (optional)
      - ./config:/app/config:ro
      # Data directory
      - ./data:/data

    networks:
      - portalis-network

    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8G

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # gRPC service
  portalis-grpc:
    build:
      context: .
      dockerfile: Dockerfile
    image: portalis-nim:latest
    container_name: portalis-nim-grpc
    restart: unless-stopped

    command: ["python", "-m", "grpc.server"]

    ports:
      - "50051:50051"  # gRPC

    environment:
      - SERVICE_NAME=portalis-nim-grpc
      - MODEL_PATH=/models/nemo_translation.nemo
      - ENABLE_CUDA=true
      - TRITON_URL=triton:8000

    volumes:
      - ./models:/models:ro
      - ./config:/app/config:ro

    networks:
      - portalis-network

    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8G

  # Triton Inference Server
  triton:
    image: nvcr.io/nvidia/tritonserver:24.01-py3
    container_name: portalis-triton
    restart: unless-stopped

    command: tritonserver --model-repository=/models

    ports:
      - "8001:8000"    # HTTP
      - "8002:8001"    # gRPC
      - "8003:8002"    # Metrics

    volumes:
      - ../deployment/triton/models:/models:ro

    networks:
      - portalis-network

    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 12G

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: portalis-prometheus
    restart: unless-stopped

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

    ports:
      - "9091:9090"

    volumes:
      - ./k8s/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    networks:
      - portalis-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: portalis-grafana
    restart: unless-stopped

    ports:
      - "3000:3000"

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

    volumes:
      - ./k8s/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana-data:/var/lib/grafana

    networks:
      - portalis-network

    depends_on:
      - prometheus

networks:
  portalis-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
