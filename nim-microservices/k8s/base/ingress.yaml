apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: portalis-nim-ingress
  labels:
    app: portalis-nim
    component: translation-service
  annotations:
    # NGINX Ingress annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "10"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"

    # Body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"

    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "ewma"  # Exponentially weighted moving average

    # Circuit breaker
    nginx.ingress.kubernetes.io/upstream-max-fails: "3"
    nginx.ingress.kubernetes.io/upstream-fail-timeout: "30s"

    # TLS
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

spec:
  ingressClassName: nginx

  tls:
  - hosts:
    - portalis-nim.example.com
    secretName: portalis-nim-tls

  rules:
  - host: portalis-nim.example.com
    http:
      paths:
      # REST API
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: portalis-nim-api
            port:
              number: 8000

      # Health endpoints
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: portalis-nim-api
            port:
              number: 8000

      # Metrics (restrict access in production)
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: portalis-nim-api
            port:
              number: 9090

      # Documentation
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: portalis-nim-api
            port:
              number: 8000

---
# Separate ingress for gRPC (requires gRPC-capable ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: portalis-nim-grpc-ingress
  labels:
    app: portalis-nim
    component: translation-service
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

spec:
  ingressClassName: nginx

  tls:
  - hosts:
    - grpc.portalis-nim.example.com
    secretName: portalis-nim-grpc-tls

  rules:
  - host: grpc.portalis-nim.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: portalis-nim-grpc
            port:
              number: 50051
