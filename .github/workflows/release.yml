name: Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: portalis
            asset_name: portalis-linux-x86_64

          - name: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: portalis
            asset_name: portalis-macos-x86_64

          - name: macos-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: portalis
            asset_name: portalis-macos-aarch64

          - name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: portalis.exe
            asset_name: portalis-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libssl-dev:arm64 pkg-config

      - name: Build binary
        run: |
          cargo build --release --bin portalis --target ${{ matrix.platform.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH_aarch64_unknown_linux_gnu: /usr/lib/aarch64-linux-gnu/pkgconfig
          RUSTFLAGS: ""

      - name: Strip binary (Unix)
        if: matrix.platform.os != 'windows-latest'
        run: |
          strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset_name }}
          path: target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/portalis-linux-x86_64/portalis
            ./artifacts/portalis-macos-x86_64/portalis
            ./artifacts/portalis-macos-aarch64/portalis
            ./artifacts/portalis-windows-x86_64/portalis.exe
          body: |
            ## Installation

            **Via npm:**
            ```bash
            npm install -g portalis
            ```

            **Via cargo:**
            ```bash
            cargo install portalis
            ```

            **Direct download:**
            Download the appropriate binary for your platform from the assets below.

            ## What's Changed

            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Publish to crates.io
        run: |
          # Publish in dependency order
          cargo publish --manifest-path core/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path orchestration/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/ingest/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/analysis/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/specgen/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/transpiler/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/build/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/test/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/packaging/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/cpu-bridge/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path agents/wassette-bridge/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
          sleep 10
          cargo publish --manifest-path cli/Cargo.toml --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
