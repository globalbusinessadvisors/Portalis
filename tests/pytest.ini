[pytest]
# Pytest configuration for Portalis NVIDIA stack testing

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths =
    tests
    nemo-integration/tests
    cuda-acceleration/tests
    deployment/triton/tests
    nim-microservices/tests
    dgx-cloud/tests
    omniverse-integration/tests

# Markers for test categorization
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (moderate speed, local services)
    e2e: End-to-end tests (slow, full stack)
    gpu: Tests requiring GPU access
    cuda: Tests requiring CUDA
    slow: Slow running tests (>5 seconds)
    benchmark: Performance benchmark tests
    security: Security validation tests
    smoke: Quick smoke tests for basic functionality
    nemo: NeMo-specific tests
    triton: Triton-specific tests
    nim: NIM microservices tests
    dgx: DGX Cloud tests
    omniverse: Omniverse integration tests
    wasm: WebAssembly tests
    requires_network: Tests requiring network access
    requires_docker: Tests requiring Docker

# Output options
addopts =
    -v
    --strict-markers
    --tb=short
    --disable-warnings
    --color=yes
    --code-highlight=yes
    --asyncio-mode=auto
    -ra
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-config=tests/.coveragerc
    --html=test-reports/report.html
    --self-contained-html

# Timeout settings
timeout = 300
timeout_method = thread

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage options
[coverage:run]
source = .
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */node_modules/*
    */migrations/*
    */setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

precision = 2
show_missing = True

[coverage:html]
directory = htmlcov

# Asyncio settings
asyncio_mode = auto

# xdist settings for parallel execution
[pytest:xdist]
# Number of workers (auto = number of CPUs)
# Can override with: pytest -n auto
looponfail = false
